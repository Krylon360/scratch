{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "linuxAdminUsername": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "User name for the Master Linux Virtual Machines (SSH or Password)."
      }
    },
    "linuxAdminPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Password for the Master Linux Virtual Machine.  Not Required.  If not set, you must provide a SSH key."
      }
    },
    "sshRSAPublicKey": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "SSH public key used for auth to Master Linux machines.  Not Required.  If not set, you must provide a password key."
      }
    },
    "windowsAdminUsername": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "User name for the Windows Swarm Agent Virtual Machines (Password Only Supported)."
      }
    },
    "windowsAdminPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Password for the Windows Swarm Agent Virtual Machines."
      }
    },
    "jumpboxEndpointDNSNamePrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Sets the Domain name label for the jumpbox.  The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address."
      }
    },
    "masterEndpointDNSNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "Sets the Domain name label for the master IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
      }
    },
    "agentEndpointDNSNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "Sets the Domain name label for the agent pool IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
      }
    },
    "agentCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "The number of Agent VMs in the cluster.  This value can be from 1 to 100"
      },
      "allowedValues": [
        1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
        21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,
        41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,
        61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
        81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100
      ]
    },
    "masterCount": {
      "type": "int",
      "defaultValue": 1,
      "allowedValues": [
        1,
        3,
        5
      ],
      "metadata": {
        "description": "The number of Swarm masters for the cluster."
      }
    },
    "agentVMSize": {
      "type": "string",
      "defaultValue": "Standard_D2",
      "allowedValues": [
        "Standard_A0", "Standard_A1", "Standard_A2", "Standard_A3", "Standard_A4", "Standard_A5",
        "Standard_A6", "Standard_A7", "Standard_A8", "Standard_A9", "Standard_A10", "Standard_A11",
        "Standard_D1", "Standard_D2", "Standard_D3", "Standard_D4",
        "Standard_D11", "Standard_D12", "Standard_D13", "Standard_D14",
        "Standard_D1_v2", "Standard_D2_v2", "Standard_D3_v2", "Standard_D4_v2", "Standard_D5_v2",
        "Standard_D11_v2", "Standard_D12_v2", "Standard_D13_v2", "Standard_D14_v2",
        "Standard_G1", "Standard_G2", "Standard_G3", "Standard_G4", "Standard_G5",
        "Standard_DS1", "Standard_DS2", "Standard_DS3", "Standard_DS4",
        "Standard_DS11", "Standard_DS12", "Standard_DS13", "Standard_DS14",
        "Standard_GS1", "Standard_GS2", "Standard_GS3", "Standard_GS4", "Standard_GS5"
      ],
      "metadata": {
        "description": "The size of the Virtual Machine."
      }
    },
    "enableVMDiagnostics": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Allows user to enable/disable Boot and VM diagnostics."
      }
    },
    "linuxPublisher": {
      "type": "string",
      "defaultValue": "Canonical",
      "metadata": {
        "description": "This is the publisher of the image used by the linux cluster"
      }
    },
    "linuxOffer": {
      "type": "string",
      "defaultValue": "UbuntuServer",
      "metadata": {
        "description": "This is the offer of the image used by the linux cluster"
      }
    },
    "linuxSku": {
      "type": "string",
      "defaultValue": "14.04.4-LTS",
      "metadata": {
        "description": "This is the linux sku used by the linux cluster"
      }
    },
    "linuxVersion": {
      "type": "string",
      "defaultValue": "latest",
      "metadata": {
        "description": "This is the linux version used by the linux cluster"
      }
    },
    "windowsAgentPublisher": {
      "type": "string",
      "defaultValue": "MicrosoftWindowsServer",
      "metadata": {
        "description": "This is the windows publisher used by the windows agents"
      }
    },
    "windowsAgentOffer": {
      "type": "string",
      "defaultValue": "WindowsServer",
      "metadata": {
        "description": "This is the windows offer used by the windows agents"
      }
    },
    "windowsAgentSku": {
      "type": "string",
      "defaultValue": "Windows-Server-Technical-Preview",
      "metadata": {
        "description": "This is the windows sku used by the windows agents"
      }
    },
    "windowsAgentVersion": {
      "type": "string",
      "defaultValue": "5.0.20160420",
      "metadata": {
        "description": "This is the windows version used by the windows agents"
      }
    },
    "isValidation": {
      "type": "int",
      "defaultValue": 0,
      "allowedValues": [0,1],
      "metadata": {
        "description": "This is testing in the validation region"
      }
    },
    "disablePasswordAuthentication": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "This setting controls whether password auth is disabled for Linux VMs provisioned by this template. Default is true which disables password and makes SSH key required."
      }
    },
    "setLinuxConfigurationForVMCreate": {
      "type": "int",
      "defaultValue": 1,
      "allowedValues": [0,1],
      "metadata": {
        "description": "This setting controls whether Linux configuration with SSH Key is passed in VM PUT Payload.  Defaults to 1.  If SSH Key is blank, this must be set to 0."
      }
    },
    "nameSuffix": {
      "type": "string",
      "defaultValue": "01234567",
      "metadata": {
        "description": "A string to include in the names of resources created.  Defaults to 0.  Can not be blank."
      }
    },
    "vmsPerStorageAccount": {
      "type": "int",
      "defaultValue": 20,
      "metadata": {
        "description": "This specifies the number of VMs per storage accounts"
      }
    },
    "postInstallScriptURI": {
      "type": "string",
      "defaultValue": "disabled",
      "metadata": {
        "description": "After installation, this specifies a script to download and install.  To disabled, set value to 'disabled'."
      }
    },
    "enableNewStorageAccountNaming": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "If true: uses DNS name prefix + Orchestrator name + Region to create storage account name to reduce name collision probability. If false: uses DNS name prefix + Orchestrator name to create storage account name to maintain template idempotency."
      }
    }
  },
  "variables": {
    "adminUsername": "[parameters('linuxAdminUsername')]",
    "adminPassword": "[parameters('linuxAdminPassword')]",
    "masterEndpointDNSNamePrefix": "[tolower(parameters('masterEndpointDNSNamePrefix'))]",
    "agentEndpointDNSNamePrefix": "[tolower(parameters('agentEndpointDNSNamePrefix'))]",
    "agentCount": "[parameters('agentCount')]",
    "masterCount": "[parameters('masterCount')]",
    "agentVMSize": "[parameters('agentVMSize')]",
    "sshRSAPublicKey": "[parameters('sshRSAPublicKey')]",
    "windowsAdminUsername": "[parameters('windowsAdminUsername')]",
    "windowsAdminPassword": "[parameters('windowsAdminPassword')]",
    "linuxPublisher": "[parameters('linuxPublisher')]",
    "linuxOffer": "[parameters('linuxOffer')]",
    "linuxSku": "[parameters('linuxSku')]",
    "linuxVersion": "[parameters('linuxVersion')]",
    "vmsPerStorageAccount": "[parameters('vmsPerStorageAccount')]",
    "postInstallScriptURI": "[parameters('postInstallScriptURI')]",

    "nameSuffix": "[parameters('nameSuffix')]",

    "isValidation": "[parameters('isValidation')]",
    "storageLocations": [
      "[resourceGroup().location]",
      "East US 2 (Stage)"
    ],
    "storageLocation": "[variables('storageLocations')[variables('isValidation')]]",

    "sshKeyPath": "[concat('/home/', variables('adminUsername'), '/.ssh/authorized_keys')]",
    "disablePasswordAuthentication": "[parameters('disablePasswordAuthentication')]",
    "setLinuxConfigurationForVMCreate": "[parameters('setLinuxConfigurationForVMCreate')]",
    "linuxConfigurations": [
        {},
        {
            "disablePasswordAuthentication": "[variables('disablePasswordAuthentication')]",
            "ssh": {
                "publicKeys": [
                    {
                        "path": "[variables('sshKeyPath')]",
                        "keyData": "[variables('sshRSAPublicKey')]"
                    }
                ]
            }
        }
    ],
    "linuxConfiguration": "[variables('linuxConfigurations')[variables('setLinuxConfigurationForVMCreate')]]",

    "orchestratorName": "swarm",

    "masterPublicIPAddressName": "[concat(variables('orchestratorName'), '-master-ip-', variables('masterEndpointDNSNamePrefix'), '-', variables('nameSuffix'))]",
    "agentPublicIPAddressName": "[concat(variables('orchestratorName'), '-agent-ip-', variables('agentEndpointDNSNamePrefix'), '-', variables('nameSuffix'))]",

    "osImagePublisher": "[variables('linuxPublisher')]",
    "osImageOffer": "[variables('linuxOffer')]",
    "osImageSKU": "[variables('linuxSku')]",
    "osImageVersion": "[variables('linuxVersion')]",

    "virtualNetworkName": "[concat(variables('orchestratorName'), '-vnet-', variables('nameSuffix'))]",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "masterSubnetName": "[concat(variables('orchestratorName'), '-masterSubnet')]",
    "masterSubnetRef": "[concat(variables('vnetID'),'/subnets/',variables('masterSubnetName'))]",
    "masterAddressPrefix": "192.168.255.0/24",
    "subnetName": "[concat(variables('orchestratorName'), '-subnet')]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
    "addressPrefix": "10.0.0.0/8",
    "subnetPrefix": "10.0.0.0/11",
    "storageAccountPrefixes": [
      "0","6","c","i","o","u","1","7","d","j","p","v",
      "2","8","e","k","q","w","3","9","f","l","r","x",
      "4","a","g","m","s","y","5","b","h","n","t","z"
    ],
    "storageAccountPrefixesCount": "[length(variables('storageAccountPrefixes'))]",
    "enableNewStorageAccountNaming": "[parameters('enableNewStorageAccountNaming')]",
    "storageAccountBaseNameNewSuffix-true":"[resourceGroup().location]",
    "storageAccountBaseNameNewSuffix-false":"",
    "storageAccountBaseName": "[concat(uniqueString(concat(variables('masterEndpointDNSNamePrefix'),variables(concat('storageAccountBaseNameNewSuffix', '-', variables('enableNewStorageAccountNaming'))))), variables('orchestratorName'))]",
    "masterStorageAccountName": "[concat(variables('storageAccountBaseName'), '0')]",
    "omsStorageAccount": "none",
    "omsStorageAccountKey": "none",
    "clusterInstallParameters": "[concat(variables('masterCount'), ' ',variables('masterVMNamePrefix'), ' ',variables('masterFirstAddr'), ' ',variables('adminUsername'),' ',variables('postInstallScriptURI'),' ',split(variables('masterAddressPrefix'),'0/24')[0])]",

    "masterVMNamePrefix": "[concat(variables('orchestratorName'), '-master-', variables('nameSuffix'), '-')]",
    "masterFirstAddr": 5,
    "masterAvailabilitySet": "[concat(variables('orchestratorName'), '-master-availabilitySet-', variables('nameSuffix'))]",
    "masterLbName": "[concat(variables('orchestratorName'), '-master-lb-', variables('nameSuffix'))]",
    "masterSizes": ["Standard_D2", "Standard_A1"],
    "masterVMSize": "[variables('masterSizes')[variables('isValidation')]]",
    "masterLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('masterLbName'))]",
    "masterLbIPConfigName": "[concat(variables('orchestratorName'), '-master-lbFrontEnd-', variables('nameSuffix'))]",
    "masterLbIPConfigID": "[concat(variables('masterLbID'),'/frontendIPConfigurations/', variables('masterLbIPConfigName'))]",
    "masterLbBackendPoolName": "[concat(variables('orchestratorName'), '-master-pool-', variables('nameSuffix'))]",
    "masterCustomScript": "[concat('/bin/bash -c \"/bin/bash /opt/azure/containers/configure-swarm-cluster.sh ',variables('clusterInstallParameters'),' >> /var/log/azure/cluster-bootstrap.log 2>&1\"')]",

    "agentFirstAddr": 20,
    "agentVMNamePrefix": "[concat(variables('orchestratorName'), '-agent-', variables('nameSuffix'))]",
    "agentsLbName": "[concat(variables('orchestratorName'), '-agent-lb-', variables('nameSuffix'))]",
    "agentsLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('agentsLbName'))]",
    "agentsLbIPConfigName": "[concat(variables('orchestratorName'), '-agent-lbFrontEnd-', variables('nameSuffix'))]",
    "agentsLbIPConfigID": "[concat(variables('agentsLbID'),'/frontendIPConfigurations/', variables('agentsLbIPConfigName'))]",
    "agentsLbBackendPoolName": "[concat(variables('orchestratorName'), '-agent-pool-', variables('nameSuffix'))]",
    "agentMaxVMs" : 100,
    "agentStorageAccountsCount": "[div(variables('agentMaxVMs'), variables('vmsPerStorageAccount'))]",
    "agentsPerIPv4Octet": 200,
    "agentCustomScript": "[concat('/usr/bin/nohup /bin/bash -c \"/bin/bash /opt/azure/containers/configure-swarm-cluster.sh ',variables('clusterInstallParameters'),' >> /var/log/azure/cluster-bootstrap.log 2>&1 &\" &')]",
    "agentRunCmdFile": "[concat(' -  content: |\n        #!/bin/bash\n        ',variables('agentCustomScript'),'\n    path: /opt/azure/containers/install-cluster.sh\n    permissions: \"0744\"\n')]",
    "agentRunCmd": "[concat('runcmd:\n -  [ /bin/bash, /opt/azure/containers/install-cluster.sh ]\n\n')]",
    "agentWindowsPublisher": "[parameters('windowsAgentPublisher')]",
    "agentWindowsOffer": "[parameters('windowsAgentOffer')]",
    "agentWindowsSku": "[parameters('windowsAgentSku')]",
    "agentWindowsVersion": "[parameters('windowsAgentVersion')]",
    "agentWindowsRDPNatRangeStart": 3389,
    "agentWindowsRDPEndRangeStop": "[add(variables('agentWindowsRDPNatRangeStart'), add(variables('agentMaxVMs'), variables('agentMaxVMs')))]",
    "agentWindowsBackendPort": 3389,

    "enableVMDiagnostics": "[parameters('enableVMDiagnostics')]",
    "diagnosticsStorageAccountName": "[concat(variables('storageAccountBaseName'), 'diag', '0')]",
    "diagnosticsStorageAccountName-true" : "[variables('diagnosticsStorageAccountName')]",
    "diagnosticsStorageAccountName-false" : "",
    "diagnosticsStorageAccountResourceGroup": "[resourceGroup().name]",
    "accountid": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',variables('diagnosticsStorageAccountResourceGroup'),'/providers/','Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName'))]",
    "wadlogs": "<WadCfg><DiagnosticMonitorConfiguration>",
    "wadperfcounters1-true": "<PerformanceCounters scheduledTransferPeriod=\"PT1M\"><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\AvailableMemory\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentAvailableMemory\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Mem. percent available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\UsedMemory\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory used\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentUsedMemory\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Memory percentage\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentUsedByCache\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Mem. used by cache\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentIdleTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU idle time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentUserTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU user time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentProcessorTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU percentage guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentIOWaitTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU IO wait time\" locale=\"en-us\"/></PerformanceCounterConfiguration>",
    "wadperfcounters2-true": "<PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\BytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk total bytes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\ReadBytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk read guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\WriteBytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk write guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\TransfersPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk transfers\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\ReadsPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk reads\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\WritesPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk writes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageReadTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk read time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageWriteTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk write time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageTransferTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk transfer time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageDiskQueueLength\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Disk queue length\" locale=\"en-us\"/></PerformanceCounterConfiguration></PerformanceCounters>",
    "wadperfcounters1-false": "",
    "wadperfcounters2-false": "",
    "wadcfgxstart": "[concat(variables('wadlogs'),variables(concat('wadperfcounters1','-',variables('enableVMDiagnostics'))),variables(concat('wadperfcounters2','-',variables('enableVMDiagnostics'))),'<Metrics resourceId=\"')]",
    "wadcfgxend": "[concat('\"><MetricAggregation scheduledTransferPeriod=\"PT1H\"/><MetricAggregation scheduledTransferPeriod=\"PT1M\"/></Metrics></DiagnosticMonitorConfiguration></WadCfg>')]",
    
    "windowswadlogs": "<WadCfg><DiagnosticMonitorConfiguration>",
    "windowswadperfcounters1-true":  "<PerformanceCounters scheduledTransferPeriod=\"PT1M\"><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% Processor Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU utilization\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% Privileged Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU privileged time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% User Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU user time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor Information(_Total)\\Processor Frequency\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"CPU frequency\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\System\\Processes\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Processes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Process(_Total)\\Thread Count\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Threads\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Process(_Total)\\Handle Count\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Handles\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\% Committed Bytes In Use\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Memory usage\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Available Bytes\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Committed Bytes\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory committed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Commit Limit\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory commit limit\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk active time\" locale=\"en-us\"/></PerformanceCounterConfiguration>",
    "windowswadperfcounters2-true": "<PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Read Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk active read time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Write Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk active write time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Transfers/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Reads/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk read operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Writes/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk write operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Bytes/sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Read Bytes/sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk read speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Write Bytes/sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk write speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\LogicalDisk(_Total)\\% Free Space\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk free space (percentage)\" locale=\"en-us\"/></PerformanceCounterConfiguration></PerformanceCounters>",
    "windowswadperfcounters1-false": "",
    "windowswadperfcounters2-false": "",
    "windowswadcfgxstart": "[concat(variables('windowswadlogs'),variables(concat('windowswadperfcounters1','-',variables('enableVMDiagnostics'))),variables(concat('windowswadperfcounters2','-',variables('enableVMDiagnostics'))),'<Metrics resourceId=\"')]",
    "windowswadcfgxend": "[concat('\"><MetricAggregation scheduledTransferPeriod=\"PT1H\"/><MetricAggregation scheduledTransferPeriod=\"PT1M\"/></Metrics></DiagnosticMonitorConfiguration></WadCfg>')]",

    "computeApiVersion": "2016-03-30",
    "networkApiVersion": "2016-03-30",
    "storageApiVersion": "2015-06-15",

    "singleQuote": "'",
    "windowsCustomScriptArguments": "[concat('$arguments = ', variables('singleQuote'),'-SwarmMasterIP ', split(variables('masterAddressPrefix'),'0/24')[0], variables('masterFirstAddr'), variables('singleQuote'), ' ; ')]",
    "windowsCustomScriptSuffix": " $inputFile = '%SYSTEMDRIVE%\\AzureData\\CustomData.bin' ; $outputFile = '%SYSTEMDRIVE%\\AzureData\\CustomDataSetupScript.ps1' ; $inputStream = New-Object System.IO.FileStream $inputFile, ([IO.FileMode]::Open), ([IO.FileAccess]::Read), ([IO.FileShare]::Read) ; $sr = New-Object System.IO.StreamReader(New-Object System.IO.Compression.GZipStream($inputStream, [System.IO.Compression.CompressionMode]::Decompress)) ; $sr.ReadToEnd() | Out-File($outputFile) ; Invoke-Expression('{0} {1}' -f $outputFile, $arguments) ; ",
    "windowsCustomScript": "[concat('powershell.exe -ExecutionPolicy Unrestricted -command \"', variables('windowsCustomScriptArguments'), variables('windowsCustomScriptSuffix'), '\" > %SYSTEMDRIVE%\\AzureData\\CustomDataSetupScript.log 2>&1')]",

     "vmSizesMap": {
         "Standard_A0": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_A1": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_A2": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_A3": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_A4": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_A5": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_A6": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_A7": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_A8": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_A9": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_A10": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_A11": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_D1": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_D2": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_D3": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_D4": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_D11": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_D12": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_D13": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_D14": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_D1_v2": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_D2_v2": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_D3_v2": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_D4_v2": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_D5_v2": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_D11_v2": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_D12_v2": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_D13_v2": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_D14_v2": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_G1": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_G2": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_G3": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_G4": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_G5": {
           "storageAccountType":"Standard_LRS"
         },
         "Standard_DS1": {
           "storageAccountType":"Premium_LRS"
         },
         "Standard_DS2": {
           "storageAccountType":"Premium_LRS"
         },
         "Standard_DS3": {
           "storageAccountType":"Premium_LRS"
         },
         "Standard_DS4": {
           "storageAccountType":"Premium_LRS"
         },
         "Standard_DS11": {
           "storageAccountType":"Premium_LRS"
         },
         "Standard_DS12": {
           "storageAccountType":"Premium_LRS"
         },
         "Standard_DS13": {
           "storageAccountType":"Premium_LRS"
         },
         "Standard_DS14": {
           "storageAccountType":"Premium_LRS"
         },
         "Standard_GS1": {
           "storageAccountType":"Premium_LRS"
         },
         "Standard_GS2": {
           "storageAccountType":"Premium_LRS"
         },
         "Standard_GS3": {
           "storageAccountType":"Premium_LRS"
         },
         "Standard_GS4": {
           "storageAccountType":"Premium_LRS"
         },
         "Standard_GS5": {
           "storageAccountType":"Premium_LRS"
         }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('masterStorageAccountName')]",
      "apiVersion": "[variables('storageApiVersion')]",
      "location": "[variables('storageLocation')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "properties": {
        "accountType":"[variables('vmSizesMap')[variables('masterVMSize')].storageAccountType]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('diagnosticsStorageAccountName')]",
      "apiVersion": "[variables('storageApiVersion')]",
      "location": "[variables('storageLocation')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('masterVMSize')].storageAccountType]"
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]",
            "[variables('masterAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          },
          {
            "name": "[variables('masterSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('masterAddressPrefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('masterAvailabilitySet')]",
      "location": "[resourceGroup().location]",
      "properties": {}
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('masterPublicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[variables('masterEndpointDNSNamePrefix')]"
        }
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "name": "[variables('masterLbName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('masterLbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('masterPublicIPAddressName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('masterLbBackendPoolName')]"
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('masterLbName'), '/', 'SSH-', variables('masterVMNamePrefix'), copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "masterLbLoopNode",
        "count": "[variables('masterCount')]"
      },
      "dependsOn": [
        "[variables('masterLbID')]"
      ],
      "properties": {
        "frontendIPConfiguration": {
          "id": "[variables('masterLbIPConfigID')]"
        },
        "protocol": "tcp",
        "frontendPort": "[copyIndex(2200)]",
        "backendPort": 22,
        "enableFloatingIP": false
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicLoopNode",
        "count": "[variables('masterCount')]"
      },
      "dependsOn": [
        "[variables('masterLbID')]",
        "[variables('vnetID')]",
        "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex())]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipConfigNode",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(split(variables('masterAddressPrefix'),'0/24')[0], copyIndex(variables('masterFirstAddr')))]",
              "subnet": {
                "id": "[variables('masterSubnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex())]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "vmLoopNode",
        "count": "[variables('masterCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/',variables('masterAvailabilitySet'))]",
        "[variables('masterStorageAccountName')]",
        "[variables('diagnosticsStorageAccountName')]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('masterAvailabilitySet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('masterVMSize')]"
        },
        "osProfile": {
          "computername": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
          "adminUsername": "[variables('adminUsername')]",
          "adminPassword": "[variables('adminPassword')]",
          "customData": "[base64('#cloud-config\n\nwrite_files:\n -  encoding: gzip\n    content: !!binary |\n        H4sIAAAAAAAC/81Ye3PbNhL/n59iS2tqOwlFSU76UEa5cWzl4mlteSS7d9O4V0EkZPJEEiwBynZdffcuHnzp4Sa9ZOaSGYtYLLCL3z6Bva/cWZi4M8IDy9r7+/+sPThhyTy8zTMK55QzDqOEwlt2b8m5qyDkECZckCjiIAIKcxZF7C5MbsFjccoSmgiOjA78ztiC0jRTg1jtFBMuqCGQjIiAJbVZcotr/yfdLU4FOPeWRb2AgY1aZkJqpvf3olyKRz31+YgIWWJbPhHUSlE8rpv863h8/utPw/HkbHQxsPkdyeJ+t91td2zrdHTyw3D868no/HI0GVZM3fY37Z5traN4iQeMKcrja1PW+fHkajg+GV1fXA1aj92VIVyOh+/O/o2UXkF5dzaeXB2fno6ReLSyjn++Hg+vJ0M5fLmyUIurswtk+PHHycn47PLqenyGM69W1tvjyXBy/fZiKPf/ZmX9dH5xfD4cTAPGRYJKTSXl+vwt7jRVSLU0B/wBnPqwz932sw//6Tjf/3Jz8EH9PL85fNZyb7ruvlxrNN2x9uagXH34zCwv1hrDnCs/QEfLE9GHVg0Qu8lxmdF5eF+yaMFrPO/CjAs49v2s5CuBK1iXsTx3v1C2IBcw6An1+QKK8yliU2IFLE5Wg2K6NBDOlt/21nBUYRbHLIF3eeJJR+Rb2SyacIzE49/xzwUVdyxbHBxajxbAHugpFYTSsiCPCBieGXp7tCSziCKbnBkrAn1PSSSCh0EXyXOWQYiBDI/ddrvb66xeg8+QrhcUOClCOIcP0PoHOPQ36MAvioYyE/Uh9SjcCgLCYUZpgrvniS/jDKMvp4ZxiyYdM6Xhax5En4Jy2/DMMkoW6nseqh8eYXYBeRgfs45VKLopBhxMYFrzUm8tsZLmM8ohYaIQ+wLIjOnkYbKd1oPeh0LJRCXWjZBo+4D8w3HSjJ+AvUL97lZmrpHr06Wb5FEEgRBp35U5/baNifWzWmJNsU0rFCdBZwo0019ZobNuhqaM3SZYEydNYETuMkE41wlcD1IglWF6ltFrMziQ0SNJYd6Pss5aUChgnfD/3RJfwhCIXC02FOiYbinnf99Gqy2ZzXo/MvVuWgMcq0bIdecAJvepk9nNogCDAZLKjN08YkZFniUg8aURp3Vat9AHNy3lvC6WFtgoRHyVXolpY2xL5oCQq7alUmxzj4aodfGdhni119PSE90naemIMs8jLjIjX49JdssHtl336ClXnto6OKgVW6d7eDiF18pjlE56bnRyhZ3DlN6n2UZBhefQQotI5rNLZSq79VhVwlXrsbbHyraqaLHLEmursLE79mbg1PVvPVajlTNjTOA5SeqgXtQTja4B7HogbBfXCj9JHvGXFB2bU2jpgxoZpf2eWoy2zR6c/zIEvrlaaWjCU3dP1TL0Aau2ZeugNO6h6Qc7T0Je2mhl77oBYNdRxDCn0Vw6xunFZBez6WpaRVSW3ZPs9XKfgaAYnwRcKjxXBizflIsSz3RigFPmLWTzv0OMYZOphOhEqZp0OfbVSjyVyTF6J+PyzaTdWS+pjshCLO0v8UtbBTdOsKvMZbfqOHckFIo+6L4C57eRowovx8qLq9tasKy/8sjBZ039+tT6KEXyRJV47nmYWOfYA3x80V1ZIpS9Xx0eS5kIj5nFDE9K/mlgrLWmW3POHkzktcmYS9kiCjGhJYDNar939O0rOEgYkFwEL2CWCwn9EgvHYeHS++aiNLq8mgxs5z3kCbbwrusuSeZmeeIaVDn+AE532uq/3tpxzC3N4YJldKBjAFfvtxox0P/uVadT4y7DdVC6q9pw397f5q0+nZM8EkYVlUo3vNDApW61nNpN5zvR1C/tg6EI8pn0P6Opa7RxMxpRwilH+l0SMeK7re33U7PQMQudaa7LKp+Wn/EU3oCb88yNmEci9Y7QXPUFHL8p4EsEgDGR5QUyAJ7f/8URdbxguCxDjxbGx2wpg6G4hjUST63HJKJYUPVpSjVJ29lhHlV+omQXWyRz9lkBb6rR2Zp/NtrLukYpx8D51AtAQ+rutrNSoNZx2s0e0SQ065NfsrzyJStMsPXM8ojywqYga1KaMelslH/q3tu7xXjhhxk4Kbg+EcTVyavs40wukwjFmHT7cGOj/NsszGPDemOrHi6OMev2MUbRGXF7R/V+xTtLvWMASLH75n2Fp4P7yayoUuONXdGOJO1ondaVtO42mpv7aZPek/TeNto670sp66WRtWRRHtOaenVY+mqg+IxFJCAkuiMPHKn66a2OVavxONeECv8il8qvaRR66mUPR7UmrlEVcMoPucdw9sFhqYDFsp0SEQxMlpWAcyhrz5bSswm93FdtrjTDCrKoTdbMuwmKKkhKcL/2vRMZW2ZrVNol8uok0RQkTGjG1zJa+yGOZP+d5jzwd6wok1SZiPMUHF+dLvVrnhunERUyOxdPqiY1KDPJzkBeHxv3IpUEtr1Rwld4UUP45QOVL3vyxmWnqGco44VqPhaht5AC2XyOSsmbvOknuZeFqZAolS/f4HhgN2pur/PRRXe7sn9gXgoQlErGG4RftjIRuy0ANU1IdUeRiho928gHvTdfd+Fru9ZolJkHsHhQPCeblyfSj9HqXXod/ydfsg13keD4AzLFIFgJGUke0KViNL5ElLO5QPPJ1mZLH8iDXEhjgJMhBHeWufjsgUQOuhBjhRFU7l7IM6/76/aob1SA8CdG/nAQrhgAAA==\n    path: /opt/azure/containers/configure-swarm-cluster.sh\n    permissions: \"0744\"\n\n')]",
          "linuxConfiguration": "[variables('linuxConfiguration')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('osImagePublisher')]",
            "offer": "[variables('osImageOffer')]",
            "sku": "[variables('osImageSKU')]",
            "version": "[variables('osImageVersion')]"
          },
          "osDisk": {
            "name": "[concat(variables('masterVMNamePrefix'), copyIndex(),'-osdisk')]",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('masterStorageAccountName')), variables('storageApiVersion')).primaryEndpoints.blob, 'vhds/', variables('masterVMNamePrefix'), copyIndex(), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('masterVMNamePrefix'), 'nic-', copyIndex()))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "[variables('enableVMDiagnostics')]",
            "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName')), variables('storageApiVersion')).primaryEndpoints.blob]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex(), '/linuxdiagnostic')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "vmLoopNode",
        "count": "[variables('masterCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', concat(variables('masterVMNamePrefix'), copyIndex()))]"
      ],
      "properties":
      {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "LinuxDiagnostic",
        "typeHandlerVersion": "2.3",
        "autoUpgradeMinorVersion": true,
        "settings": {
           "xmlCfg": "[base64(concat(variables('wadcfgxstart'), variables('masterVMNamePrefix'), copyIndex(), variables('wadcfgxend')))]",
           "StorageAccount": "[variables(concat('diagnosticsStorageAccountName', '-', variables('enableVMDiagnostics')))]"
        },
        "protectedSettings": {
            "storageAccountName": "[variables(concat('diagnosticsStorageAccountName', '-', variables('enableVMDiagnostics')))]",
            "storageAccountKey": "[listKeys(variables('accountid'), variables('storageApiVersion')).key1]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex(), '/configuremaster')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "vmLoopNode",
        "count": "[variables('masterCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('masterVMNamePrefix'), copyIndex(), '/extensions/linuxdiagnostic')]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.4",
        "settings": {
          "fileUris": [],
          "commandToExecute": "[variables('masterCustomScript')]"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[concat(variables('storageAccountPrefixes')[mod(copyIndex(),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(copyIndex(),variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),copyIndex(1))]",
      "apiVersion": "[variables('storageApiVersion')]",
      "location": "[variables('storageLocation')]",
      "copy": {
        "name": "vmLoopNode",
        "count": "[variables('agentStorageAccountsCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('agentPublicIPAddressName'))]"
      ],
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('agentVMSize')].storageAccountType]"
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('agentPublicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[variables('agentEndpointDNSNamePrefix')]"
        }
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "name": "[variables('agentsLbName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('agentPublicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('agentsLbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('agentPublicIPAddressName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('agentsLbBackendPoolName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRuleHTTP",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('agentsLbIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[concat(variables('agentsLbID'), '/backendAddressPools/', variables('agentsLbBackendPoolName'))]"
              },
              "protocol": "tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentsLbID'),'/probes/tcpHTTPProbe')]"
              }
            }
          },
          {
            "name": "LBRuleHTTPS",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('agentsLbIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[concat(variables('agentsLbID'), '/backendAddressPools/', variables('agentsLbBackendPoolName'))]"
              },
              "protocol": "tcp",
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentsLbID'),'/probes/tcpHTTPSProbe')]"
              }
            }
          },
          {
            "name": "LBRulePort8080",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('agentsLbIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[concat(variables('agentsLbID'), '/backendAddressPools/', variables('agentsLbBackendPoolName'))]"
              },
              "protocol": "tcp",
              "frontendPort": 8080,
              "backendPort": 8080,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentsLbID'),'/probes/tcpPort8080Probe')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "tcpHTTPProbe",
            "properties": {
              "protocol": "tcp",
              "port": 80,
              "intervalInSeconds": "5",
              "numberOfProbes": "2"
            }
          },
          {
            "name": "tcpHTTPSProbe",
            "properties": {
              "protocol": "tcp",
              "port": 443,
              "intervalInSeconds": "5",
              "numberOfProbes": "2"
            }
          },
          {
            "name": "tcpPort8080Probe",
            "properties": {
              "protocol": "tcp",
              "port": 8080,
              "intervalInSeconds": "5",
              "numberOfProbes": "2"
            }
          }
        ],
        "inboundNatPools": [
          {
            "name": "[concat('RDP-', variables('agentVMNamePrefix'))]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('agentsLbIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPortRangeStart": "[variables('agentWindowsRDPNatRangeStart')]",
              "frontendPortRangeEnd": "[variables('agentWindowsRDPEndRangeStop')]",
              "backendPort": "[variables('agentWindowsBackendPort')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[concat(variables('agentVMNamePrefix'), '-vmss')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(0,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(0,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),1)]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(1,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(1,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),2)]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(2,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(2,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),3)]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(3,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(3,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),4)]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(4,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(4,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),5)]",
        "[variables('agentsLbID')]",
        "[variables('vnetID')]",
        "[variables('diagnosticsStorageAccountName')]"
      ],
      "sku": {
        "name": "[variables('agentVMSize')]",
        "tier": "Standard",
        "capacity": "[variables('agentCount')]"
      },
      "properties": {
        "upgradePolicy": {
          "mode": "Automatic"
        },
        "virtualMachineProfile": {
          "storageProfile": {
            "imageReference": {
              "publisher": "[variables('agentWindowsPublisher')]",
              "offer": "[variables('agentWindowsOffer')]",
              "sku": "[variables('agentWindowsSku')]",
              "version": "[variables('agentWindowsVersion')]"
            },
            "osDisk": {
              "name": "[concat(variables('agentVMNamePrefix'), 'vmssosdisk', 0)]",
              "vhdContainers": [
               "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(0,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(0,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),1), variables('storageApiVersion') ).primaryEndpoints.blob, 'osdisk')]",
               "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(1,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(1,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),2), variables('storageApiVersion')).primaryEndpoints.blob, 'osdisk')]",
               "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(2,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(2,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),3), variables('storageApiVersion')).primaryEndpoints.blob, 'osdisk')]",
               "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(3,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(3,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),4), variables('storageApiVersion')).primaryEndpoints.blob, 'osdisk')]",
               "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(4,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(4,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),5), variables('storageApiVersion')).primaryEndpoints.blob, 'osdisk')]"

              ],
              "caching": "ReadWrite",
              "createOption": "FromImage"
            }
          },
          "osProfile": {
            "computerNamePrefix": "[concat('w', variables('nameSuffix'))]",
            "adminUsername": "[variables('windowsAdminUsername')]",
            "adminPassword": "[variables('windowsAdminPassword')]",
            "customData": ""
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "agentNodeNic",
                "properties": {
                  "primary": "true",
                  "ipConfigurations": [
                    {
                      "name": "nicipconfig",
                      "properties": {
                        "subnet": {
                          "id": "[variables('subnetRef')]"
                        },
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat(variables('agentsLbID'), '/backendAddressPools/', variables('agentsLbBackendPoolName'))]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[concat(variables('agentsLbID'), '/inboundNatPools/', 'RDP-', variables('agentVMNamePrefix'))]"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "extensionProfile": {
            "extensions": [
              {
                "name": "vmssCustomScriptExtension",
                "properties": {
                  "publisher": "Microsoft.Compute",
                  "type": "CustomScriptExtension",
                  "typeHandlerVersion": "1.8",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "commandToExecute": "[variables('windowsCustomScript')]"
                  }
                }
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": "[variables('enableVMDiagnostics')]",
              "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName')), variables('storageApiVersion')).primaryEndpoints.blob]"
            }
          }
        }
      }
    }
  ],
  "outputs": {
    "jumpboxFQDN": {
      "type": "string",
      "value": ""
    },
    "masterFQDN": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))).dnsSettings.fqdn]"
    },
    "agentFQDN": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('agentPublicIPAddressName'))).dnsSettings.fqdn]"
    },
    "diagnosticsStorageAccountUri": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName')), variables('storageApiVersion')).primaryEndpoints.blob]"
    }
  }
}